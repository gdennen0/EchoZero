Date: 05/31/24
Hello World 

This is just a brainstorming/ideas sesh.


Overarching Big goals:
--Phone Lighting fixture control software
--NodeC/new lighting workflow standards


Shorter Term Goals:
--Bring a useful program to increase efficiency in lighting programming workflow
-- Timeline Target:
Requirements:
- Torch studio workflow
- generic platform/standard to process track elements in channels "by type"
- data flow standardization?? Input/output analysis and tranformation
- traditional audio analyzation
- extrapolate events from audio
- how break audio down into base elements/split stems etc, whats this workflow
- AI to split stems: https://moises.ai/

Short Term development goals: 
- flush out ControlLanguage core functionality
- investigate various stem splitting projects
- outline flow of information 
- flush out program objects and function
    - small thought **develop framework to select different FPS rates, make any rate possible but lets just start with 30 and 25 options?

General Steps:

(1) Ingest Audio || Audio -> Stems
    (a) Import source audio file
        (i) transform imported audio to program audio object
    (b) split audio file into stems
        (i) https://github.com/karaokenerds/python-audio-separator/tree/main (OS Python project to separate stems from source file in 
        a CLI application)
        (ii) Stemgen: Open source project to convert song into stems: https://github.com/axeldelafosse/stemgen?tab=readme-ov-file
    (c) assign stems to program layer objects

(2) Manipulate Stem Audio || Optimize the audio before being analyzed
    (a) Apply input transformation(optimize input)

(3) Analyze Stems 
# Broad strokes here~ essentially just if x qualifications are met via then mark event, develop a system to synthesize data sources
# Returns List of events 
    (a) Traditional audio analysis (Should always use this for context)
        - onset detection
    (b) Torch studio process to detect events

    (c) Things to look into? 
        (i) NeuraNote | https://github.com/DamRsn/NeuralNote (transforms audio to midi?)
        (ii) DrumExtractor | https://github.com/nathanshaw/drumExtracto

(4) Export:
# Once we figure out our core variables we can sort out how to make an api for this
# Standardization and easy implementation will be key for this and should be considered from the tip



================================================================================
|| Application Outline
================================================================================
 (1) main.py
    # application main loop to connect main_control.py actions and main_model.py functions
 (2) main_control.py
    # Contains all potential inputs... maybe just keep this one file right now? we can keep the CLI simple until we 
    can implement the ControlLanguage. Once ControlLanguage is implemented, we can add the lexer pretty easily into this file,
    without a ton of extra bloat from a whole library of control files (I don't know if this makes sense for now?)
 (3) main_model.py
    # Initializes the four model files; ingest_audio.py, stem_manipulation.py, stem_analysis.py, and data_export.py
    (a) ingest_audio.py:
        # Converts audio to pytorch tensor, standardizes audio file to project samplerate, and converts file to 
        stems. Stems are assigned to project layers.
        (i) load_audio.py:
            # imports audio file and standardizes it to project samplerate
            # ARGS: filepath, const_samplerate
            # RETURNS: audio_tensor
        (ii) split_stem.py:
            # converts pytorch tensor to audio stems... stem layers stored in a table
            # ARGS: audio_tensor
            # RETURNS: stem_table
    (b) stem_manipulation.py:
        # ARGS: stem_table[i]
        # RETURNS: stem_table[i]
    (c) stem_analysis.py:
        # Takes stem input and analysis type (user input) and applies function to convert file to positive or null instance. 
        # ARGS: analysis_type, stem_table[i]
        # RETURNS: 
        (i) 

Tools:
# Logging Tools
    (1) log(message, level="")
        # outputs a message to console with given level for now
# Validation Tools | These are self explanitory
    (2) path_exists(path)
    (3) file_exists(path):
    (4) is_valid_audio_format(path):

================================================================================
|| Additional Helpful thoughts:
================================================================================
Stem Type Categories:
-- Vocals
-- Drums
-- Guitar
-- Acoustic Guitar
-- Electric Guitar
-- Bass
-- Piano
-- Other